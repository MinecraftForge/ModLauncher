import net.minecraftforge.gradleutils.PomUtils

plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradleutils' version '[2.3,2.4)'
    id 'net.minecraftforge.licenser' version '1.0.1'
    id 'org.gradlex.extra-java-module-info' version '1.5'
    id 'com.github.ben-manes.versions' version '0.49.0'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
    withSourcesJar()
}

group = 'net.minecraftforge'
version = gradleutils.tagOffsetVersion
logger.lifecycle('Version: ' + version)

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
    mavenLocal()
}

dependencies {
    api(libs.bundles.asm)

    implementation(libs.securemodules)
    implementation(libs.bundles.log4j.runtime)
    implementation(libs.jopt.simple)
    implementation(libs.bootstrap.api)

    compileOnly(libs.nulls)

    annotationProcessor(libs.log4j.core)
}

configurations.all {
    outgoing {
        capability("net.minecraftforge:modlauncher:$version")
        capability("net.minecraftforge:ModLauncher:$version") // Stupid case sensitivity when using project deps
        capability("cpw.mods:modlauncher:$version")
    }
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
    automaticModule('net.sf.jopt-simple:jopt-simple', 'jopt.simple')
}

license {
    header = file("LICENSE-header.txt")
}

jar {
    manifest {
        attributes([
            'Forge-Module-Layer':    'boot'
        ] as LinkedHashMap)
        attributes([
            'Specification-Title':    'modlauncher',
            'Specification-Vendor':   'Forge Development LLC',
            'Specification-Version':  gradleutils.gitInfo.tag,
            'Implementation-Title':   project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor':  'Forge Development LLC'
        ] as LinkedHashMap, 'cpw/mods/modlauncher/api/')

        attributes([
            'Specification-Title':    'modlauncherserviceapi',
            'Specification-Vendor':   'Forge Development LLC',
            'Specification-Version':  gradleutils.gitInfo.tag,
            'Implementation-Title':   project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor':  'Forge Development LLC'
        ]  as LinkedHashMap, 'cpw/mods/modlauncher/serviceapi/')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked'
}

compileJava {
    options.javaModuleVersion = project.version.toString()
    options.javaModuleMainClass = 'cpw.mods.modlauncher.Launcher'
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        configurations.all {
            suppressPomMetadataWarningsFor(it.name)
        }
        from components.java
        artifactId = 'modlauncher'
        pom {
            name = 'Mod Launcher'
            description = 'Common ModLauncher framework'
            url = 'https://github.com/MinecraftForge/ModLauncher'
            PomUtils.setGitHubDetails(pom, 'ModLauncher')

            license PomUtils.Licenses.LGPLv2_1
            developers {
                developer PomUtils.Developers.cpw
                developer PomUtils.Developers.LexManos
            }
        }
    }
    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

tasks.register('writeManifest') {
    doLast {
        jar.manifest.writeTo(file('src/main/resources/META-INF/MANIFEST.MF'))
    }
}

eclipse {
    autoBuildTasks writeManifest
}

// Hack eclipse into knowing that the gradle deps are modules
eclipse.classpath {
    containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
    file.whenMerged { entries.findAll { it.kind == 'lib' || it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each { it.entryAttributes['module'] = 'true' } }
}

allprojects {
    ext.VALID_VMS = [
        'Adoptium':  [16, 17, 18, 19, 20, 21],
        'Amazon':    [16, 17, 18, 19, 20, 21],
        'Azul':      (16..21),
        'BellSoft':  (16..21),
        'Graal_VM':  [16, 17,     19, 20, 21],
        'IBM':       [16, 17, 18, 19, 20    ],
        'Microsoft': [16, 17,             21],
        'Oracle':    (16..21),
        'SAP':       (16..20)
    ]
    //ext.VALID_VMS = [ 'Adoptium':  [16] ]
}